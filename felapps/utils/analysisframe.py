"""Subclass of PlotFrame, which is generated by wxFormBuilder."""

import wx
import h5py

import myui

from . import resutils


# Implementing PlotFrame
class AnalysisFrame(myui.PlotFrame):
    def __init__(self, parent, datasrc):
        myui.PlotFrame.__init__(self, parent)
        
        self.datasrc = datasrc
        self.image_data = self.get_data(datasrc)
        self.fontsize = wx.SystemSettings_GetFont(wx.SYS_SYSTEM_FONT).GetPointSize()
        self.post_init()

    def post_init(self):
        # cmap_cb
        cmaplist = ['viridis', 'jet', 'inferno',
                    'plasma', 'magma', 'hot', 'cool',
                    'gist_earth', 'gist_rainbow', 
                    'gist_heat', 'terrain', 'gnuplot2', 
                    'seismic', 'gray']
        self.cmap_cb.Clear()
        self.cmap_cb.AppendItems(cmaplist)
        self.cmap_cb.SetValue('jet')

        # line style
        lslist = ['solid', 'dashed', 'dashdot', 'dotted']
        self.ls_cb.Clear()
        self.ls_cb.AppendItems(lslist)
        self.ls_cb.SetValue('solid')

        # marker style
        mk_dict = {
                    'none'     : {'code': u'none',                              'symbol': '' },
                    'point'    : {'code': u'\N{BLACK CIRCLE}',                  'symbol': '.'},
                    'circle'   : {'code': u'\N{WHITE CIRCLE}',                  'symbol': 'o'},
                    'square'   : {'code': u'\N{WHITE LARGE SQUARE}',            'symbol': 's'},
                    'pentagon' : {'code': u'\N{WHITE PENTAGON}',                'symbol': 'p'},
                    'hexagon1' : {'code': u'\N{WHITE HEXAGON}',                 'symbol': 'h'},
                    'diamond'  : {'code': u'\N{WHITE DIAMOND}',                 'symbol': 'D'},
                    'tdiamond' : {'code': u'\N{LOZENGE}',                       'symbol': 'd'},
                    'star'     : {'code': u'\N{STAR OPERATOR}',                 'symbol': '*'},
                    'cross'    : {'code': u'\N{VECTOR OR CROSS PRODUCT}',       'symbol': 'x'},
                    'plus'     : {'code': u'\N{PLUS SIGN}',                     'symbol': '+'},
                    'hline'    : {'code': u'\N{MINUS SIGN}',                    'symbol': '_'},
                    'vline'    : {'code': u'\N{DIVIDES}',                       'symbol': '|'},
                    'tri_down' : {'code': u'\N{WHITE DOWN-POINTING TRIANGLE}',  'symbol': 'v'},
                    'tri_up'   : {'code': u'\N{WHITE UP-POINTING TRIANGLE}',    'symbol': '^'},
                    'tri_right': {'code': u'\N{WHITE RIGHT-POINTING TRIANGLE}', 'symbol': '>'},
                    'tri_left' : {'code': u'\N{WHITE LEFT-POINTING TRIANGLE}',  'symbol': '<'},
                }
        self.mk_cb.Clear()
        mk_code = [v['code']   for k,v in mk_dict.items()]
        self.mk_symbol = [v['symbol'] for k,v in mk_dict.items()]
        self.mk_cb.AppendItems(mk_code)
        self.mk_cb.SetValue('none')

        # image
        self.plotpanel.set_figure_data(self.image_data)

        self.plotpanel.axes.set_xlabel('$x$', fontsize=self.fontsize+4)
        self.plotpanel.axes.set_ylabel('$y$', fontsize=self.fontsize+4)
        self.plotpanel.refresh()

        # grid color
        self.grid_color = '#000000'

        # [mfc, mec, lc]_bmp color

        self.set_staticbmp_color(self.lc_bmp, wx.Colour(255, 165, 0))
        self.set_staticbmp_color(self.mec_bmp, wx.RED)
        self.set_staticbmp_color(self.mfc_bmp, wx.RED)

        # color range
        clim = self.plotpanel.get_clim()
        self.crange_tc.SetValue(clim)

        # events:
        self.Bind(wx.EVT_BUTTON, self.onIncFontSize, self.inc_font_btn)
        self.Bind(wx.EVT_BUTTON, self.onDecFontSize, self.dec_font_btn)
        self.Bind(wx.EVT_BUTTON, self.onPickGridc,   self.gridc_btn)
        self.Bind(wx.EVT_CLOSE, self.onExit)

    def get_data(self, datasrc):
        f = h5py.File(datasrc, 'r')
        data = f['image']['data'][...]
        return data

    # Handlers for PlotFrame events.
    def onIncFontSize(self, event):
        self.fontsize += 1
        self.plotpanel.set_fontsize(self.fontsize)

    def onDecFontSize(self, event):
        self.fontsize -= 1
        self.plotpanel.set_fontsize(self.fontsize)

    def cmap_cbOnCombobox(self, event):
        new_cmap = event.GetEventObject().GetValue()
        self.plotpanel.set_colormap(new_cmap)

    def crange_tcOnTextEnter(self, event):
        obj = event.GetEventObject()
        cr = obj.GetValue()
        if ':' not in cr:
            obj.SetValue(self.clim0)
            return
        else:
            self.clim0 = cr
            self.plotpanel.set_clim(cr)

    def ll_originOnRadioButton(self, event):
        """ set origin lower left
        """
        if event.GetEventObject().GetValue():
            self.plotpanel.set_origin(ll=True)

    def ul_originOnRadioButton(self, event):
        """ set origin upper left
        """
        if event.GetEventObject().GetValue():
            self.plotpanel.set_origin(ul=True)

    def ur_originOnRadioButton(self, event):
        """ set origin upper right
        """
        if event.GetEventObject().GetValue():
            self.plotpanel.set_origin(ur=True)

    def lr_originOnRadioButton(self, event):
        """ set origin lower right
        """
        if event.GetEventObject().GetValue():
            self.plotpanel.set_origin(lr=True)

    def lc_btnOnButtonClick(self, event):
        color = self.pick_color()
        if color is not None:
            c = color.GetAsString(wx.C2S_HTML_SYNTAX)
            self.plotpanel.set_linecolor(c)
            self.set_staticbmp_color(self.lc_bmp, color)

    def ls_cbOnCombobox(self, event):
        obj = event.GetEventObject()
        new_ls = obj.GetStringSelection()
        self.plotpanel.set_linestyle(new_ls)

    def lw_tcOnTextEnter(self, event):
        obj = event.GetEventObject()
        val = obj.GetValue()
        try:
            lw = float(val)
            self.plotpanel.set_linewidth(lw)
        except:
            obj.SetValue('')

    def mk_cbOnCombobox(self, event):
        obj = event.GetEventObject()
        idx = obj.GetSelection()
        new_mk = self.mk_symbol[idx]
        self.plotpanel.set_marker(new_mk)

    def ms_tcOnTextEnter(self, event):
        obj = event.GetEventObject()
        val = obj.GetValue()
        try:
            ms = float(val)
            self.plotpanel.set_markersize(ms)
        except:
            obj.SetValue('')

    def mec_btnOnButtonClick(self, event):
        color = self.pick_color()
        if color is not None:
            c = color.GetAsString(wx.C2S_HTML_SYNTAX)
            self.plotpanel.set_mec(c)
            self.set_staticbmp_color(self.mec_bmp, color)

    def mfc_btnOnButtonClick(self, event):
        color = self.pick_color()
        if color is not None:
            c = color.GetAsString(wx.C2S_HTML_SYNTAX)
            self.plotpanel.set_mfc(c)
            self.set_staticbmp_color(self.mfc_bmp, color)

    def exit_btnOnButtonClick(self, event):
        self.exitApp()
    
    def onExit(self, event):
        self.exitApp()

    def imhide_tgbtnOnToggleButton(self, event):
        obj = event.GetEventObject()
        self.plotpanel.hide_image(obj.GetValue())
    
    def grid_ckbOnCheckBox(self, event):
        if event.GetEventObject().IsChecked():
            self.plotpanel.set_grids(self.grid_color)
        else:
            self.plotpanel.set_grids(self.grid_color, b=False)

    def onPickGridc(self, event):
        color = self.pick_color()
        if color is not None:
            c = color.GetAsString(wx.C2S_HTML_SYNTAX)
            self.grid_color = c
            if self.grid_ckb.IsChecked():
                self.plotpanel.set_grids(color=c)
            self.set_staticbmp_color(self.gridc_btn, color)

    def pick_color(self):
        dlg = wx.ColourDialog(self)
        dlg.GetColourData().SetChooseFull(True)  # only windows
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            #self.bkgdcolortc.SetValue(color.GetAsString(wx.C2S_HTML_SYNTAX))
            dlg.Destroy()
            return color

    def direct_xyaxis(self, x_direction, y_direction):
        if self.xaxis_direction != x_direction:
            self.plotpanel.axes.invert_xaxis()
            self.xaxis_direction = x_direction
        if self.yaxis_direction != y_direction:
            self.plotpanel.axes.invert_yaxis()
            self.yaxis_direction = y_direction

    def exitApp(self):
        dial = wx.MessageDialog(self, message = "Are you sure to exit this application?",
                                caption = 'Exit Warning',
                                style = wx.YES_NO | wx.NO_DEFAULT | wx.CENTRE | wx.ICON_QUESTION) 
        if dial.ShowModal() == wx.ID_YES:                                
            self.Destroy() 

    def set_staticbmp_color(self, obj, color):
        r, g, b = color.Red(), color.Green(), color.Blue()
        w, h = 16, 16
        bmp = wx.EmptyBitmap(w, h)
        img = wx.ImageFromBitmap(bmp)
        img.SetRGBRect(wx.Rect(0, 0, w, h), r, g, b)
        obj.SetBitmap(img.ConvertToBitmap())
 

