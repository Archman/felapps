Example 5
=========

``latticeviewer`` -- Accelerator online modeling app.

.. note:: ``latticeviewer`` is an app based on package ``beamline``,
    and is wrapped by ``felapps`` to present the GUI to the users, either
    in the main panel of ``runfelapps`` or ``appdrawer``, or the script
    named ``latticeviewer`` or ``lv``.

Introduction
------------

This app is built upon the console environment of accelerator online-model,
which provides the basic toolkits to translate the real accelerator machine
(as well as free-electron laser facility) into computer-recognized objects,
such that manipulation to the real machine should be operated on the 
software level, so intuitively, this app should be the base on which
physics-related procedures/extensions could be built. In this example, 
the basic online-model procedure will be presented, contrasted to the 
CLI approach demonstrated `here <https://archman.github.io/beamline/src/demos/demo2.html>`_.

Usage Guide
-----------

Open app by ``lv`` or ``latticeviewer``, just like the following image 
shows:

.. image:: ../../images/latticeviewer_01.png
    :width: 500px

The acceptable file should be either valid ``lte`` file 
(which is lattice file that could be used by ``Elegant``)
or ``JSON`` file (which is converted from valid ``lte`` file).

.. note:: ``lte`` file could be converted to ``JSON`` file
    and vice versa, see commands' `doc <https://archman.github.io/beamline/src/demos/demo4.html>`_: ``lte2json`` and ``json2lte``.


Open File
^^^^^^^^^

Click ``File > Open (CTRL+O)`` to import the lattice file 
(``lte`` or ``JSON``), here take the lattice of Shanghai soft x-ray 
free-electron laser (SXFEL) as example, 
:download:`here <../../snippets/sxfel_all.lte>` is the ``lte`` file, 
which covers injector, LINAC, linac-to-undulator sections, while possible
``ele`` file and other required files that could be used to accomplish 
``Elegant`` tracking could be download 
:download:`here <../../snippets/sxfel_ele.tar.bz2>` and 
:download:`injector data <../../snippets/injector.tar.bz2>` if needed.

After the file is opened, the lattice would be parsed into tree list as shown
in the left panel of ``latticeviewer``, with the tree rootname of 
``Lattice`` (which could be changed in ``Tree Name`` box [#f1]_).
All elements could be reached either by clicking the items or by searching
the keywords in the left bottom search box. When element is selected, e.g.
``rfcw`` is selected, the right panel will list all the properties of 
selected item, just like the following image shows.

.. image:: ../../images/latticeviewer_02.png
    :width: 500px

In the right bottom, push red squared button, the brief operation log will
pop up, from which one can grab basic information about the loaded lattice
file, e.g. here indicates that 489 elements and 3111 properties have been
parsed, if operation fails, the green boxed ``LIST TREE`` status should 
turn red.

.. image:: ../../images/latticeviewer_03.png
    :width: 500px

Currently, the operations of the properties listing panel only support 
``Highlight`` and ``Edit``, it is envisioned that more functionality 
should be extended.


Operations
^^^^^^^^^^

``latticeviewer`` is designed to be an online-modeling app, other high-level
operations should be based on the fundamental lattice parsing feature, below
is the main operations:

*Show*

If lattice file is not opened by ``Open`` menu, push ``Show`` button should give
guideline to locate the valid lattice file to show.

*Generate*

This button if the first step of online-modeling, heavy tasks about the 
element/beamline modeling will be done if ``Generate`` is pushed, 
dialog will pop up if some other operation trigs this operation.

*Model*

This button is required by the online-modeling, another approach 
implemented on the GUI app [#f2]_.

*Clear*

Clear the lattice tree.

*Exit*

Quit the app.

*Menu operations*

    * Save, ``CTRL+S``;
    * Save AS, ``SHIFT+CTRL+S``;
    * Choose beamline, ``SHIFT+CTRL+B``;
    * Lattice visualization, ``SHIFT+CTRL+V``.
    * View lattice in three format: ``raw string``, 
      ``JSON string``, ``dict``.

Examples    
^^^^^^^^

*Save AS*

Push ``Generate``, and ``SHIFT+CTRL+S`` to save lattice as ``JSON`` format.


*Model Selected Beamline*

Push ``SHIFT+CTRL+B`` to select the beamline name that to be modeled, 
e.g. ``SXFEL`` here is the beamline defined in ``lte`` file that
including elements from LINAC and LTU. Click ``OK`` to confirm.

.. image:: ../../images/latticeviewer_04.png
    :width: 500px

Click ``Model`` button to finish the modeling procedure, then push 
``SHIFT+CTRL+V`` to open ``Tools > Visualization`` window.

.. image:: ../../images/latticeviewer_05.png
    :width: 500px

In this window, the artist view of the selected beamline is firstly shown
in the ``Drawing`` panel, which support features like:
    
    * Operations provides by the bottom toolbar, e.g. *panning*, 
      *zooming*, *save as*, etc.
    * Element name tooltips, i.e. show the element name and type 
      in the right of toolbar when mouse move onto the element, 
      as well as the ``s`` position along the beamline.

Also, type name annotation feature is supported, by checking in ``Tag Options`` panel.


.. image:: ../../images/sxfel_all.png
    :width: 1000px


.. todo::
    Note that ``latticeviewer`` is just a GUI app that only facilitate 
    part of online-modeling operations, all the infrastructure features 
    that make this possible are built into CLI, thus more features 
    that would be implemented in the GUI framework should require much
    more effect. The ideal development cycle is to built high-level 
    operations to the lattice into ``Tools`` menu, after all the 
    algorithms have been well tested in the CLI framework.

.. only:: html

    .. rubric:: Footnotes:

.. [#f1] When the tree name is changed, ``Reopen (CTRL+R)`` is needed.
.. [#f2] The CLI approach could be found in ``beamline``'s 
         `doc <https://archman.github.io/beamline/src/demos/demo2.html>`_.
